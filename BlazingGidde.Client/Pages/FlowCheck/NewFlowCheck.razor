@page "/new-flowcheck/{TemplateKindId:int}"
@using BlazingGidde.Shared.DTOs.FlowCheck.Request
@using BlazingGidde.Shared.DTOs.FlowCheck.TemplateItems.Request
@inject TemplateKindManager TemplateKindManager

<h3>Nuevo flowcheck</h3>

<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" IsActive="_isXSmallScreen" IsActiveChanged="IsActiveChanged" />
<style>
    .full-width-button {
    width: 100%;
    }

    .header-spacing {
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .delete-incidency-container {
    margin-left: auto;
    }
</style>
<div>
    <DxGridLayout RowSpacing="10px">
        <Rows>
            <DxGridLayoutRow Areas="templateheader" Height="auto" />
            <DxGridLayoutRow Areas="templatecontent" Height="max" />
            <DxGridLayoutRow Areas="templatefooter" Height="auto" />
        </Rows>
        <Items>
            <!-- Header -->
            <DxGridLayoutItem Area="templateheader">
                <Template>
                    <div class="header-spacing">
                        <TemplateFormComponent KindDto="KindDto" CreateDate="DateTime.Now" IsReadOnly="true" />
                    </div>
                </Template>
            </DxGridLayoutItem>

            <!-- Main Content -->
            <DxGridLayoutItem Area="templatecontent">
                <Template>
                    <DxFormLayout CaptionPosition="CaptionPosition.Vertical">
                        <DxFormLayoutGroup ColSpanMd="12"
                        Caption="Elemento"
                        Expanded="@(!_isIncidenciaVisible)"
                        ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                        AnimationType="LayoutAnimationType.Slide">
                            <DxFormLayoutItem ColSpanMd="12">
                                <Template>
                                    @if (_hasCustomItems)
                                    {
                                        <TemplateItemCard Item="SelectedCustomItem"
                                        IsReadOnly="true"
                                        OnRemove="_ => { return; }"/>
                                    }
                                    else
                                    {
                                        <GazItemCard Item="SelectedGazItem"></GazItemCard>
                                    }

                                </Template>
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                        <DxFormLayoutGroup Visible="@_isIncidenciaVisible"
                        ColSpanMd="12"
                        aria-labelledby="caption-template"
                        ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start"
                        AnimationType="LayoutAnimationType.Slide">
                            <HeaderContentTemplate>
                                <div id="caption-template">
                                    Incidencia
                                </div>
                                <div class="delete-incidency-container">
                                    <DxButton RenderStyle="ButtonRenderStyle.Danger"
                                    RenderStyleMode="ButtonRenderStyleMode.Outline"
                                    Attributes="@(new Dictionary<string, object> { ["title"] = "Borrar incidencia" })"
                                    IconCssClass="oi oi-trash"
                                    Click="DeleteIncidency" />
                                </div>
                            </HeaderContentTemplate>
                            <Items>
                                <DxFormLayoutItem ColSpanMd="12">
                                    <h2>Incidencia</h2>
                                </DxFormLayoutItem>
                            </Items>
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </Template>
            </DxGridLayoutItem>

            <!-- Footer -->
            <DxGridLayoutItem Area="templatefooter">
                <Template>
                    <div class="d-flex flex-column gap-2">
                        @if (_hasCustomItems)
                        {
                            @if (!_showFinalSave)
                            {
                                <!-- KO button -->
                                <DxButton CssClass="full-width-button"
                                RenderStyle="ButtonRenderStyle.Danger"
                                RenderStyleMode="ButtonRenderStyleMode.Outline"
                                Text="KO"
                                Click="ShowIncidencia"
                                Enabled="!_isIncidenciaVisible" />

                                <!-- Ok button -->
                                <DxButton CssClass="full-width-button"
                                Text="Ok"
                                Click="OnOkClicked" />
                            }
                            else
                            {
                                <!-- Guardar button once we’re done with custom items -->
                                <DxButton CssClass="full-width-button"
                                Text="Guardar"
                                Click="OnSaveClicked" />
                            }
                        }
                        else
                        {
                            <!-- Fallback for no custom items, show whatever you want -->
                            <DxButton CssClass="full-width-button"
                                      RenderStyle="ButtonRenderStyle.Danger"
                                      RenderStyleMode="ButtonRenderStyleMode.Outline"
                                      Text="Incidencia"
                                      Click="ShowIncidencia"
                                      Enabled="!_isIncidenciaVisible" />
                            <DxButton CssClass="full-width-button"
                            Text="Guardar"
                            Click="OnSaveClicked" />
                        }
                    </div>

                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>

@code {
    [Parameter] public int? TemplateKindId { get; set; }
    private CreateTemplateKindDto? KindDto { get; set; }
    private CreateCustomTemplateItemDto SelectedCustomItem { get; set; }
    private CreateGazItemDto SelectedGazItem { get; set; }
    private bool _isIncidenciaVisible = false;
    private bool _hasCustomItems = false;
    private int currentIndex = 0;
    bool _isXSmallScreen;
    private bool _showFooterButtons = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (TemplateKindId.HasValue && TemplateKindId > 0)
        {
            KindDto = await TemplateKindManager.GetEditModelByID(TemplateKindId.Value);
            _hasCustomItems = KindDto.CustomTemplateItems.Any();
            if (_hasCustomItems)
            {
                _showFooterButtons = false;
                SelectedCustomItem = KindDto.CustomTemplateItems.ToArray()[currentIndex];
            }
            else
            {
                SelectedGazItem = new CreateGazItemDto();
            }
        }
    }

    void IsActiveChanged(bool isActive) => _isXSmallScreen = isActive;

    void ShowIncidencia() => _isIncidenciaVisible = true;

    async Task DeleteIncidency()
    {
        _isIncidenciaVisible = false;
        await Task.CompletedTask;
    }

    private bool _showFinalSave; // initially false

    void OnOkClicked()
    {
        // If there are more items, move on
        if (currentIndex < KindDto.CustomTemplateItems.Count - 1)
        {
            currentIndex++;
            SelectedCustomItem = KindDto.CustomTemplateItems.ToArray()[currentIndex];
        }
        else
        {
            // We are at the last item => show the final Save button
            _showFinalSave = true;
        }
    }

    void OnSaveClicked()
    {
        // Final save logic
    }

    

}
