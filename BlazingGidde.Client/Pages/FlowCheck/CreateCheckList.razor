@page "/create-checklist/{code}/{id:int}"

@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.FlowCheck.Request
@using BlazingGidde.Shared.DTOs.FlowCheck.TemplateItems
@using BlazingGidde.Shared.DTOs.FlowCheck.TemplateItems.Request
@using BlazingGidde.Client.Services.FlowCheck.TemplateItems
@using Microsoft.AspNetCore.Components.Rendering
@inject TemplateKindManager TemplateKindManager
@inject TemplateTypeManager TemplateTypeManager
@inject TemplateItemManager TemplateItemManager
@inject BreakeableItemManager BreakableItemManager
@inject GazItemManager GazItemManager
@inject IncidencyManager IncidencyManager

@if (TypeInfo == null)
{
    <p>Cargando el formulario...</p>
}
else
{
    <DxFormLayout CssClass="w-100">
        <DxFormLayoutItem Caption="Nombre de la Plantilla:">
            <DxTextBox @bind-Text="KindDto.Name" InputId="templateName" ReadOnly />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Fecha de Creación:">
            <DxTextBox Text="@Template.CreateDate.ToShortDateString()" ReadOnly />
        </DxFormLayoutItem>
    </DxFormLayout>

    <div>
        @if (TypeInfo.Code == (int)TemplateCode.BREAKABLE)
        {
            <CheckListBreakable Id="@Id" />
        }
        else if (TypeInfo.Code == (int)TemplateCode.GAS)
        {
            <CheckListGas/>
        }
        else
        {
            <p>Formulario no encontrado para este tipo de plantilla.</p>
        }
    </div>
}

@code {
    [Parameter]
    public string Code { get; set; }

    [Parameter]
    public int? Id { get; set; }

    private TemplateTypeDto TypeInfo { get; set; }
    private TemplateKindDto KindDto { get; set; } = new();
    private TemplateDto Template { get; set; } = new();
    private List<CustomTemplateItemDto> CustomItems { get; set; } = new();
    public FlowUserDto userDto { get; set; } = new FlowUserDto();

    private int CurrentIndex { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        // Asigna la fecha y el usuario de creación
        Template.CreateDate = DateTime.Now;
        Template.CreateUser = userDto.PersonFirstName;

        if (!string.IsNullOrWhiteSpace(Code))
        {
            var templateCode = Enum.Parse<TemplateCode>(Code, true);
            TypeInfo = await TemplateTypeManager.GetByCode((int)templateCode);
        }

        if (Id > 0)
        {
            KindDto = await TemplateKindManager.GetByID(Id.Value);
        }

        Template = new TemplateDto
            {
                TemplateKindId = KindDto.Id,
                CreateDate = DateTime.Now,
                CreateUser = "UsuarioActual" // Cambiar por el usuario real conectado
            };
    }

    private async Task OnSaveChecklist()
    {
        // Lógica de guardar
        Console.WriteLine("Checklist guardado correctamente.");
    }
}
