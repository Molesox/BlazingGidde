@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.FlowCheck.Request
@inject NavigationManager NavigationManager
@inject TemplateTypeManager templateTypeManager


<div class="h-100 grid-wrapper">
    <DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen"/>
    <DxGrid Data="@Data" @ref="@Grid" CssClass="grid-style" EditMode="GridEditMode.PopupEditForm"
            CustomizeEditModel="Grid_CustomizeEditModel" AllowColumnReorder="true" AllowGroup="true" AllowSort="true"
            ShowGroupPanel="true" ShowGroupedColumns="true" SearchBoxNullText="Buscar..." ShowFilterRow="true"
            ShowSearchBox="true" DataItemDeleting="Grid_DataItemDeleting" EditModelSaving="Grid_EditModelSaving">
        <Columns>

            <DxGridDataColumn Caption="Nombre" FieldName="Name" CaptionAlignment="GridTextAlignment.Left"
                              TextAlignment="GridTextAlignment.Left">
            </DxGridDataColumn>

            <DxGridCommandColumn Width="100px" FixedPosition="GridColumnFixedPosition.Left" NewButtonVisible="false"
                                 Caption="Actions" TextAlignment="GridTextAlignment.Center" CaptionAlignment="GridTextAlignment.Center">
                <CellDisplayTemplate Context="gridcontext">
                    <!-- Click="@(async() => { if (Grid is not null) await Grid.StartEditNewRowAsync(); })"> -->
                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Primary"
                              IconCssClass="oi oi-plus" Click="@(async () =>
                                                               {
                                                                   var item = (TemplateTypeDto)gridcontext.DataItem;
                                                                   var param = ((TemplateCode)item.Code).ToString().ToLower();
                                                                   NavigationManager.NavigateTo($"/create-template/{param}");
                                                               })">
                    </DxButton>
                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Secondary"
                              IconCssClass="oi oi-pencil"
                              Click="@(async () =>
                                     {
                                         if (Grid is not null) await Grid.StartEditDataItemAsync(gridcontext.DataItem);
                                     })">
                    </DxButton>
                    <AuthorizeView Roles="admin">
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                  RenderStyle="ButtonRenderStyle.Danger" CssClass="grid-delete-btn" IconCssClass="oi oi-trash"
                                  Click="@(() => DeleteRow(gridcontext.VisibleIndex))">
                        </DxButton>
                    </AuthorizeView>
                </CellDisplayTemplate>
            </DxGridCommandColumn>
        </Columns>

        <EditFormTemplate Context="EditFormContext">
            @{
                var templateType = (CreateTemplateTypeDto)EditFormContext.EditModel;
            }
            <DxFormLayout>
                <DxFormLayoutItem Caption="Name" ColSpanMd="12">
                    @EditFormContext.GetEditor("Name")
                </DxFormLayoutItem>
                <DxFormLayoutItem>
                    <CustomTemplateItemComponent Id="@templateType.Id" @bind-Value="@templateType.ImgUrl"/>

                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>

</div>

@code {

    IGrid? Grid { get; set; }
    object? Data { get; set; }

    [Inject] IDialogService? DialogService { get; set; }

    bool isXSmallScreen;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Data = templateTypeManager.Get();
        Grid?.AutoFitColumnWidths();
    }

    private void DeleteRow(int visibleIndex)
    {
        Grid?.ShowRowDeleteConfirmation(visibleIndex);
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedProduct = (CreateTemplateTypeDto)e.EditModel;
        var result = e.IsNew == false ? await templateTypeManager.Update(editedProduct) : await templateTypeManager.Insert(editedProduct);
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dataItem = (TemplateTypeDto)e.DataItem;
        if (dataItem == null)
            e.EditModel = new CreateTemplateTypeDto();
        else
        {
            e.EditModel = await Task.Run(() => dataItem.Map().ToANew<CreateTemplateTypeDto>(cfg => cfg.MapEntityKeys()));
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var dataItem = (TemplateTypeDto)e.DataItem;

        await templateTypeManager.Delete(dataItem.Id);
        Grid?.Reload();
    }

}