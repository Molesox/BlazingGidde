@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.FlowCheck.Request
@inject TemplateKindManager templateKindManager
@inject NavigationManager NavigationManager


<div class="h-100 grid-wrapper">
    <DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen"/>
    <DxGrid Data="@Data" @ref="@Grid" CssClass="grid-style" EditMode="GridEditMode.PopupEditForm"
            CustomizeEditModel="Grid_CustomizeEditModel" AllowColumnReorder="true" AllowGroup="true" AllowSort="true"
            ShowGroupPanel="true" ShowGroupedColumns="true" SearchBoxNullText="Buscar..." ShowFilterRow="true"
            ShowSearchBox="true" DataItemDeleting="Grid_DataItemDeleting" EditModelSaving="Grid_EditModelSaving">
        <Columns>
            <DxGridDataColumn Caption="Tipo" FieldName="TemplateTypeName" TextAlignment="GridTextAlignment.Left"
                              CaptionAlignment="GridTextAlignment.Left" Width="30%">
            </DxGridDataColumn>
            <DxGridDataColumn Caption="Nombre" FieldName="Name" TextAlignment="GridTextAlignment.Left"
                              CaptionAlignment="GridTextAlignment.Left" Width="30%">
            </DxGridDataColumn>
            <DxGridDataColumn Caption="Descripción del programa" FieldName="ProgramDescription"
                              TextAlignment="GridTextAlignment.Left" Visible="@(!isXSmallScreen)"
                              CaptionAlignment="GridTextAlignment.Left" Width="30%">
            </DxGridDataColumn>
            <DxGridDataColumn CaptionAlignment="GridTextAlignment.Center" Caption="Versión" FieldName="Version"
                              TextAlignment="GridTextAlignment.Center" Width="100px" Visible="@(!isXSmallScreen)">
            </DxGridDataColumn>
            <DxGridDataColumn CaptionAlignment="GridTextAlignment.Center" Caption="Sección" FieldName="Section"
                              TextAlignment="GridTextAlignment.Center" Width="100px" Visible="@(!isXSmallScreen)">
            </DxGridDataColumn>
            <DxGridCommandColumn Width="100px" FixedPosition="GridColumnFixedPosition.Left" NewButtonVisible="false"  
                                 Caption="Acciones" TextAlignment="GridTextAlignment.Center" CaptionAlignment="GridTextAlignment.Center">
                <CellDisplayTemplate Context="gridcontext">

                    <AuthorizeView Roles="admin, manager, viewer">
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                  RenderStyle="ButtonRenderStyle.Primary" IconCssClass="oi oi-eye" Click="@(async () =>
                                                                                                          {
                                                                                                              var item = (TemplateKindDto)gridcontext.DataItem;
                                                                                                              NavigationManager.NavigateTo($"/view-template/{item.Id}");
                                                                                                          }
                                                                                                          )">
                        </DxButton>
                    </AuthorizeView>

                    <AuthorizeView Roles="admin, viewer">
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Danger"
                                  CssClass="grid-plus-btn" IconCssClass="oi oi-plus"
                                  Click="@(async () =>
                                         {
                                             var item = (TemplateKindDto)gridcontext.DataItem;
                                             NavigationManager.NavigateTo($"/new-flowcheck/{item.Id}");
                                         })">
                        </DxButton>
                    </AuthorizeView>


                    <AuthorizeView Roles="manager, admin">
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                  RenderStyle="ButtonRenderStyle.Success" IconCssClass="oi oi-pencil"
                                  Click="@(async () =>
                                         {
                                             if (Grid is not null) await Grid.StartEditDataItemAsync(gridcontext.DataItem);
                                         })">
                        </DxButton>
                    </AuthorizeView>

                    <AuthorizeView Roles="admin">

                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                  RenderStyle="ButtonRenderStyle.Danger" CssClass="grid-delete-btn" IconCssClass="oi oi-trash"
                                  Click="@(() => DeleteRow(gridcontext.VisibleIndex))">
                        </DxButton>
                    </AuthorizeView>

                </CellDisplayTemplate>
            </DxGridCommandColumn>


        </Columns>

        <EditFormTemplate Context="EditFormContext">
            @{
                var templateKind = (CreateTemplateKindDto)EditFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem Caption="Name" ColSpanMd="12">
                    @EditFormContext.GetEditor("Name")
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Program Description" ColSpanMd="12">
                    @EditFormContext.GetEditor("ProgramDescription")
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Versión" ColSpanMd="6">
                    @EditFormContext.GetEditor("Version")
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Sección" ColSpanMd="6">
                    @EditFormContext.GetEditor("Section")
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Remarks:" ColSpanMd="6">
                    @EditFormContext.GetEditor("Remarks")
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>

</div>


@code {

    IGrid? Grid { get; set; }
    object? Data { get; set; }

    [Inject] IDialogService? DialogService { get; set; }

    bool isXSmallScreen;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Data = templateKindManager.Get();
        Grid?.AutoFitColumnWidths();
    }

    private void DeleteRow(int visibleIndex)
    {
        Grid?.ShowRowDeleteConfirmation(visibleIndex);
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedProduct = (CreateTemplateKindDto)e.EditModel;
        if (e.IsNew)
        {
            //await templateKindManager.Insert(editedProduct);
        }
        else
        {
            editedProduct.CustomTemplateItems.Clear();
            await templateKindManager.Update(editedProduct);
        }
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dataItem = (TemplateKindDto)e.DataItem;
        if (dataItem == null)
            e.EditModel = new CreateTemplateKindDto();
        else
        {
            e.EditModel = await Task.Run(() => dataItem.Map().ToANew<CreateTemplateKindDto>(cfg => cfg.MapEntityKeys()));
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var dataItem = (TemplateKindDto)e.DataItem;

        await templateKindManager.Delete(dataItem.Id);
        Grid?.Reload();
    }

}