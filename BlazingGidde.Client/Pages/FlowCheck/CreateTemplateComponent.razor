@page "/create-template/{code}"
@page "/update-template/{id:int}"
@page "/view-template/{id:int}"
@using System.Security.Claims
@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.FlowCheck.Request

@inject NavigationManager NavigationManager
@inject TemplateKindManager TemplateKindManager
@inject TemplateTypeManager TemplateTypeManager

<h3>@TypeInfo?.Name</h3>

<DxToastProvider Name="Overview" MaxToastCount="5" AnimationType="ToastAnimationType.Slide"
                 HorizontalAlignment="HorizontalAlignment.Right"
                 DisplayTime="TimeSpan.Zero" Width="320px"/>

<DxStackLayout Orientation="Orientation.Vertical" CssClass="w-100 ch-480">
    <Items>
        <DxStackLayoutItem Length="auto">
            <Template>
                <TemplateFormComponent KindDto="KindDto" CreateDate="CreateDate" IsReadOnly="IsReadOnly"/>
            </Template>
        </DxStackLayoutItem>

        <DxStackLayoutItem>
            <Template>
                @if (TemplateCode == TemplateCode.BREAKABLE)
                {
                    <DynamicComponent Type="@typeof(BreakableTemplate)"
                                      Parameters="@(new Dictionary<string, object>
                                                  {
                                                      [nameof(BreakableTemplate.Items)] = Items,
                                                      [nameof(BreakableTemplate.ItemsChanged)] =
                                                          EventCallback.Factory.Create<List<CreateCustomTemplateItemDto>>(this, OnItemsChanged),
                                                      [nameof(BreakableTemplate.IsReadOnly)] = IsReadOnly
                                                  })"/>
                }
            </Template>
        </DxStackLayoutItem>

        <DxStackLayoutItem Length="auto">
            <Template>
                <div style="margin-top: 20px; margin-bottom: 20px;">
                    <DxButton RenderStyle="ButtonRenderStyle.Secondary" Click="Cancel">
                        Cancelar
                    </DxButton>
                    @if (!IsReadOnly)
                    {
                        <DxButton style="margin-left: 4px;"
                                  RenderStyle="ButtonRenderStyle.Primary"
                                  Click="Save">
                            Guardar
                        </DxButton>
                    }
                </div>
            </Template>
        </DxStackLayoutItem>
    </Items>
</DxStackLayout>

@code {

    [Parameter] public string Code { get; set; }
    [Parameter] public int? Id { get; set; }

    private string Mode { get; set; } = "readonly";
    private bool IsReadOnly { get; set; }
    private bool IsAddMode { get; set; }

    private TemplateTypeDto TypeInfo { get; set; }
    private TemplateCode TemplateCode { get; set; }

    private DateTime CreateDate { get; set; } = DateTime.UtcNow;
    private CreateTemplateKindDto KindDto { get; set; } = new() { Version = 1 };
    private List<CreateCustomTemplateItemDto> Items { get; set; } = new();

    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; }

    private ClaimsPrincipal User { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

            if (uri.AbsolutePath.Contains("view-template"))
                Mode = "readonly";
            else if (uri.AbsolutePath.Contains("update-template"))
                Mode = "edit";
            else if (uri.AbsolutePath.Contains("create-template"))
                Mode = "add";

            IsReadOnly = Mode == "readonly";
            IsAddMode = Mode == "add";

            if (!string.IsNullOrWhiteSpace(Code)
                && Enum.TryParse(Code, true, out TemplateCode parsedCode))
            {
                TemplateCode = parsedCode;
            }

            if (IsAddMode)
            {
                TypeInfo = await TemplateTypeManager.GetByCode((int)TemplateCode);
                if (TypeInfo != null)
                {
                    KindDto.TemplateTypeId = TypeInfo.Id;
                    TemplateCode = (TemplateCode)TypeInfo.Code;
                }
            }
            else if (Id.HasValue && Id > 0)
            {
                var dto = await TemplateKindManager.GetEditModelByID(Id.Value);
                if (dto != null)
                {
                    TypeInfo = await TemplateTypeManager.GetByID(dto.TemplateTypeId);
                    KindDto = dto.Map().Over(KindDto);
                    TemplateCode = (TemplateCode)TypeInfo?.Code;

                    Items = KindDto?.CustomTemplateItems?.Map()
                                .ToANew<List<CreateCustomTemplateItemDto>>()
                            ?? new List<CreateCustomTemplateItemDto>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing component: {ex.Message}");
        }
    }

    private void OnItemsChanged(List<CreateCustomTemplateItemDto> updatedItems)
    {
        Items = updatedItems;
    }

    private void Cancel(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("templates-type");
    }

    private async Task Save(MouseEventArgs e)
    {
        try
        {
            if (Items.Any())
                KindDto.CustomTemplateItems = Items;

            if (TypeInfo != null)
                KindDto.TemplateTypeId = TypeInfo.Id;

            KindDto.CustomTemplateItems?.ForEach(it => it.Id = 0);

            if (IsAddMode)
                await TemplateKindManager.Insert(KindDto);
            else
                await TemplateKindManager.Update(KindDto);

            NavigationManager.NavigateTo("templates-type");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving template: {ex.Message}");
        }
    }

}