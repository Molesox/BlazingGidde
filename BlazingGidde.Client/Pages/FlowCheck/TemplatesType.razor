@page "/templates-type"
@using BlazingGidde.Client.Pages.FlowCheck.Grids
@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.FlowCheck.Request
@attribute [Authorize(Roles = "admin,manager")]

@inject TemplateTypeManager templateTypeManager
@inject NavigationManager NavigationManager

<PageTitle>Tipos de plantilla</PageTitle>
<div class="container mt-5">
    <h3 class="mb-4">Tipos de Plantilla</h3>

    <!-- Toolbar with toggle view button -->
    <div class="toolbar d-flex justify-content-between align-items-center mb-3">
        <DxSearchBox NullText="Search..." InputDelay="@InputDelay" BindValueMode="@BindValueMode"
                     CssClass="custom-search-box flex-grow-1 me-3" @bind-Text="@SearchText" aria-label="Search">
        </DxSearchBox>

        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Primary"
                  CssClass="flex-shrink-0" Text="@GetToggleViewText()" @onclick="ToggleView">
        </DxButton>
    </div>

    <!-- Templates -->
    <div class="row gy-4">
        @if (IsGridView)
        {
            <TemplateTypeGrid/>
        }
        else
        {
            <!-- Tiles View -->
            @foreach (var template in filteredTemplates)
            {
                <div class="col-lg-3 col-md-6 col-sm-12 mb-4 d-flex">
                    <div class="card card-template h-100 text-center">
                        
                        
                            <div class="card-body">
                                <CustomTemplateItemComponent IsReadOnly="true"
                                                             Id="@template.Id"
                                                             @bind-Value="@template.ImgUrl" />
                            </div>
                            
                            <div class="card-footer d-flex justify-content-between">
                                <DxTextBox ReadOnly="true"
                                           @bind-Text="@template.Name"
                                           NullText="@($"Nombre {template.Id}")" />
                            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                      RenderStyle="ButtonRenderStyle.Primary" IconCssClass="oi oi-plus"
                                      @onclick='() => CreateNewTemplate(template.Code)'>
                            </DxButton>

                            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                      RenderStyle="ButtonRenderStyle.Danger" IconCssClass="oi oi-trash"
                                      @onclick='() => DeleteTemplate(template)'>
                            </DxButton>
                            </div>
                            
                        </div>
                    </div>
            
            }
        }
    </div>
</div>
<DxDialogProvider/>

@code {
    [Inject] IDialogService DialogService { get; set; }

    private CreateTemplateTypeDto? selectedItem { get; set; }

    public List<TemplateTypeDto> templateTypedto = new();

    private bool PopupVisible { get; set; }
    private bool? Result { get; set; } = null;
    private string SearchText { get; set; } = string.Empty;
    private int? InputDelay { get; } = 300;
    private BindValueMode BindValueMode { get; } = BindValueMode.OnInput;
    bool isXSmallScreen;
    IGrid Grid { get; set; }


    private bool IsGridView { get; set; }

    protected override async Task OnInitializedAsync()
    {
        templateTypedto = (await templateTypeManager.GetAll()).ToList();
    }

    private IEnumerable<TemplateTypeDto> filteredTemplates =>
        string.IsNullOrWhiteSpace(SearchText)
            ? templateTypedto
            : templateTypedto.Where(t => t.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase));

    private void CreateNewTemplate(int code)
    {
        var param = ((TemplateCode)code).ToString().ToLower();
        NavigationManager.NavigateTo($"/create-template/{param}");
    }


    private async Task DeleteTemplate(TemplateTypeDto templateType)
    {
        if (templateType != null)
        {
            var result = await OpenConfirmDialogAsync();
            if (result)
            {
                templateTypedto.Remove(templateType);
                await templateTypeManager.Delete(templateType.Id);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task<bool> OpenConfirmDialogAsync()
    {
        return await DialogService.ConfirmAsync(new MessageBoxOptions
        {
            Text = "Esta seguro que desea borrar esta plantilla?",
            OkButtonText = "Yes",
            CancelButtonText = "No",
            ShowIcon = false,
            ShowCloseButton = false,
            RenderStyle = MessageBoxRenderStyle.Danger
        });
    }

    private void CloseModal()
    {
        PopupVisible = false;
        StateHasChanged();
    }

    private async Task SaveModal()
    {
        var updated = await templateTypeManager.Update(selectedItem);
        var item = templateTypedto.First(t => t.Id == updated.Id);
        updated.Map().Over(item);

        CloseModal();
    }

    private void ToggleView()
    {
        IsGridView = !IsGridView;
    }

    private string GetToggleViewText()
    {
        return IsGridView ? "Tiles View" : "Grid View";
    }

}