@page "/templates-type"
@inject TemplateTypeManager templateTypeManager
@inject NavigationManager NavigationManager
@using BlazingGidde.Shared.Models.FlowCheck;
@using BlazingGidde.Shared.Repository

<PageTitle>Templates Type</PageTitle>

<div class="container mt-5">
    <h3 class="text-center mb-4">Templates Type</h3>

    <div class="centered-container">
        <DxTextBox CssClass="form-control" NullText="Search..." ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" @bind-Text="searchTerm" />
    </div>

    <div class="row gy-4">
        @foreach (var template in filteredTemplates)
        {
            <div class="col-sm-6 col-md-4 col-lg-3">
                <div class="card card-template h-100 text-center">
                    <img src="@template.ImgUrl" class="card-img-top" alt="@template.Name">
                    <div class="card-body">
                        <h5 class="card-title">@template.Name</h5>
                        <div class="d-flex justify-content-center gap-2 mt-3">
                            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Primary"
                                      Text="+" @onclick='() => CreateNewTemplate(template.Code)'></DxButton>
                            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Secondary"
                                      Text="E" @onclick='() => EditTemplate(template)'></DxButton>
                            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Danger"
                                      Text="D" @onclick='() => DeleteTemplate(template)'></DxButton>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<Modal @ref="modal" Title="Edit Template Type" Size="ModalSize.Large" OnHide="CloseModal">
    <BodyTemplate>
        <EditForm Model="selectedItem" OnValidSubmit="SaveItem">
            <DataAnnotationsValidator />
            <div class="container-fluid p-3">
                <h5 class="mb-3">Template Type Details</h5> 
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Name</label>
                        <InputText class="form-control" @bind-Value="selectedItem.Name" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Image URL</label>
                        <InputText class="form-control" @bind-Value="selectedItem.ImgUrl" />
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-3">
                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Secondary"
                              Text="Close" @onclick="CloseModal"></DxButton>
                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Primary"
                              Text="Save" @onclick="CloseModal"></DxButton>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

@code {
    private string searchTerm = "";
    private TemplateType? selectedItem { get; set; }
    private Modal modal = default!;
    public List<TemplateType> mytemplate = new List<TemplateType>();

    protected override async Task OnInitializedAsync()
    {
        mytemplate = (await templateTypeManager.GetAll()).ToList();
    }

    private IEnumerable<TemplateType> filteredTemplates =>
    string.IsNullOrWhiteSpace(searchTerm)
    ? mytemplate
    : mytemplate.Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void CreateNewTemplate(TemplateCode code)
    {
        NavigationManager.NavigateTo($"/{code.ToString().ToLower()}-template");

    }

    private async Task EditTemplate(TemplateType templateType)
    {
        selectedItem = templateType;
        await modal?.ShowAsync();
    }

    private async Task DeleteTemplate(TemplateType templateType)
    {
        if (templateType != null)
        {
            mytemplate.Remove(templateType);
            await templateTypeManager.Delete(templateType);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CloseModal()
    {
        await modal?.HideAsync();
        selectedItem = null;
    }

    private async Task SaveItem()
    {
        if (selectedItem is null) return;

        templateTypeManager.Update(selectedItem);

       


        CloseModal();
        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .card-template {
        border: 1px solid #ddd;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .card-template:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    }

    .card-img-top {
        height: 150px;
        object-fit: cover;
        border-radius: 12px 12px 0 0;
    }

    .centered-container {
        display: flex;
        justify-content: center;
        align-items: center; 
        margin-bottom: 30px;
    }

    .form-control {
        max-width: 500px; 
        width: 100%; 
    }


    .btn-outline-primary,
    .btn-outline-secondary,
    .btn-outline-danger {
        border-radius: 8px;
    }
</style>