@page "/templates"
@inject TemplateKindManager templateKindManager
@inject NavigationManager NavigationManager
@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.FlowCheck.Request
@using BlazingGidde.Shared.Models.FlowCheck
@using BlazingGidde.Shared.Repository
@using AgileObjects.AgileMapper.Extensions

<PageTitle>Consulta Plantillas</PageTitle>

<div class="container mt-5">
    <h3 class="text-center mb-4">Consultar plantillas</h3>

    <!-- Search bar with toggle view button -->
    <div class="search-container d-flex align-items-center mb-3">
        <DxSearchBox NullText="Search..." InputDelay="@InputDelay" BindValueMode="@BindValueMode"
        CssClass="custom-search-box flex-grow-1 me-3" @bind-Text="@SearchText" aria-label="Search">
        </DxSearchBox>

    </div>
    <DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen" />
    <div class="h-100 grid-wrapper">
        <DxGrid Data="@Data" @ref="@Grid" CssClass="grid-style" EditMode="GridEditMode.PopupEditForm" CustomizeEditModel="Grid_CustomizeEditModel"
                EditModelSaving="Grid_EditModelSaving">
            <Columns>
                <DxGridDataColumn Caption="Nombre" FieldName="Name" TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn Caption="Descripción del programa" FieldName="ProgramDescription" TextAlignment="GridTextAlignment.Center" Visible="@(!isXSmallScreen)">
                </DxGridDataColumn>
                <DxGridDataColumn Caption="Version" FieldName="Version" TextAlignment="GridTextAlignment.Center" Visible="@(!isXSmallScreen)">
                </DxGridDataColumn>
                <DxGridDataColumn Caption="Sección" FieldName="Section" TextAlignment="GridTextAlignment.Center" Visible="@(!isXSmallScreen)">
                </DxGridDataColumn>
                <DxGridCommandColumn NewButtonVisible="false" Caption="Actions" TextAlignment="GridTextAlignment.Center" >
                    <CellDisplayTemplate Context="gridcontext">
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Primary"
                                  Text="+"></DxButton>
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Secondary"
                                  Text="E"></DxButton>
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Danger"
                                  IconCssClass="grid-icon grid-icon-delete" CssClass="grid-delete-btn"
                                  Text="D"
                                  Click="@(() => Grid.ShowRowDeleteConfirmation(gridcontext.VisibleIndex))"></DxButton>
                            
                        

                    </CellDisplayTemplate>
                </DxGridCommandColumn>


            </Columns>

            <EditFormTemplate Context="EditFormContext">
                @{
                    var templateKind = (CreateTemplateKindDto)EditFormContext.EditModel;
                }
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem Caption="Name" ColSpanMd="6">
                        @EditFormContext.GetEditor("Name")
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Program Description" ColSpanMd="6">
                        @EditFormContext.GetEditor("ProgramDescription")
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Remarks:" ColSpanMd="6">
                        @EditFormContext.GetEditor("Remarks")
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditFormTemplate>
        </DxGrid>

    </div>
</div>


<style>

    .grid-style th {
        text-align: center !important;
    }

</style>


@code {
    [Inject] IDialogService DialogService { get; set; }

    private TemplateKindDto? selectedItem { get; set; }
    public List<TemplateKindDto> mytemplate = new List<TemplateKindDto>();
    private string SearchText { get; set; } = string.Empty;
    private int? InputDelay { get; set; } = 300;
    private BindValueMode BindValueMode { get; set; } = BindValueMode.OnInput;
    bool isXSmallScreen;
    IGrid Grid { get; set; }

    object Data { get; set; }

    protected override async Task OnInitializedAsync()
    {// todo:: hacer como en person main .razor
        Data = templateKindManager.Get();
    }

    private IEnumerable<TemplateKindDto> filteredTemplates =>
        string.IsNullOrWhiteSpace(SearchText)
            ? mytemplate
            : mytemplate.Where(t => t.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase));

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedProduct = (CreateTemplateKindDto)e.EditModel;
        var result = e.IsNew == false ? templateKindManager.Update(editedProduct) : templateKindManager.Insert(editedProduct);

    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dataItem = (TemplateKindDto)e.DataItem;
        if (dataItem == null)
            e.EditModel = new CreateTemplateKindDto { };
        else
        {
            e.EditModel = dataItem.Map().ToANew<CreateTemplateKindDto>();
        }
    }

    private async Task<bool> OpenConfirmDialogAsync()
    {
        return await DialogService.ConfirmAsync(new MessageBoxOptions()
            {
                Text = "Esta seguro que desea borrar esta plantilla?",
                OkButtonText = "Yes",
                CancelButtonText = "No",
                ShowIcon = false,
                ShowCloseButton = false,
                RenderStyle = MessageBoxRenderStyle.Danger,
            });
    }

    private void EditItem(TemplateKindDto templatekind)
    {
        // Lógica de edición
    }

    private async Task DeleteTemplate(TemplateKindDto templateKind)
    {
        if (templateKind != null)
        {
            var result = await OpenConfirmDialogAsync();
            if (result)
            {
                mytemplate.Remove(templateKind);
                await templateKindManager.Delete(templateKind.Id);
                await InvokeAsync(StateHasChanged);
            }
        }
    }


}
