@using BlazingGidde.Shared.DTOs.FlowCheck.Request
@using BlazingGidde.Client.Shared
<!-- Display the list of items in a grid / card layout -->
<div class="container my-4">
    <div class="row">
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <div class="col-md-3 mb-4">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column">
                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                            {
                                <img src="@item.ImageUrl" alt="Uploaded" class="fixed-size-image" />
                            }
                            else
                            {
                                <CustomTemplateItemComponent Id="@item.Id" @bind-Value="@item.ImageUrl" />
                            }
                            <div style="margin-top: 3px;" class="d-flex justify-content-between align-items-center">
                                <DxTextBox @bind-Text="@item.Name" NullText="@($"Nombre{item.Id}")" />
                                <div class="mt-auto">
                                    <DxButton Click="@(() => RemoveItem(item))" IconCssClass="oi oi-trash"
                                        RenderStyle="ButtonRenderStyle.Danger" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Floating action button to add a new item -->
<DxButton Click="AddItem" IconCssClass="oi oi-plus" CssClass="fab-button btn-primary" />

@code {
    [Parameter] public List<CreateCustomTemplateItemDto> Items { get; set; } = new();
    [Parameter] public EventCallback<List<CreateCustomTemplateItemDto>> ItemsChanged { get; set; }

    protected override void OnInitialized()
    {
        // If you want default items on load:
        if (Items == null || !Items.Any())
        {
            Items = Enumerable.Range(1, 4)
            .Select(i => new CreateCustomTemplateItemDto { Id = i })
            .ToList();
            ItemsChanged.InvokeAsync(Items);

        }
    }

    void AddItem()
    {
        int newId = Items.Any() ? Items.Max(i => i.Id) + 1 : 1;
        Items.Add(new CreateCustomTemplateItemDto { Id = newId });
        ItemsChanged.InvokeAsync(Items);
    }

    void RemoveItem(CreateCustomTemplateItemDto item)
    {
        Items.Remove(item);
        ItemsChanged.InvokeAsync(Items);
    }
}

<style>
    .fab-button {
        position: fixed;
        bottom: 40px;
        right: 40px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        font-size: 24px;
        padding: 0;
    }

    .fab-button .fas {
        margin: 0;
    }

    .fab-button:hover {
        background-color: var(--bs-primary);
    }

    .fixed-size-image {
        width: 100px;
        height: 100px;
        object-fit: cover;
    }

    .card {
        border-radius: 10px;
    }
</style>