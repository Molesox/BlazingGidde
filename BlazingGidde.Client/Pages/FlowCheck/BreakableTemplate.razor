@page "/breakable-template"
@layout TemplateKindLayout
@using BlazingGidde.Client.Shared


<div>
    <div class="grid-container">
        @for (int i = 0; i < Items.Count; i += 4)
        {
            <div class="grid-row">
                @for (int j = i; j < i + 4 && j < Items.Count; j++)
                {
                    var item = Items[j];
                    <div class="upload-container">
                        <span>Profile Picture</span>
                        <div id="dropzone-external" class="card flex-box">
                            @if (UploadComplete)
                            {
                                <img id="dropzone-image"
                                     src="@($"data:{FileType};base64,{Convert.ToBase64String(FileBytes ?? Array.Empty<byte>())}")"
                                     alt="DxFileInput uploaded image" />
                            }
                            else if (TotalBytesRead != 0)
                            {
                                <DxProgressBar CssClass="upload-progress" Value="@TotalBytesRead"
                                               MaxValue="@FileSize"  Label="@(TotalBytesRead == FileSize ? "Your image is almost ready..." : string.Empty)" />
                            }
                            else
                            {
                                <div id="dropzone-text" class="flex-box">
                                    <span>Drag & Drop the desired file</span>
                                    <span>…or click to browse for a file instead.</span>
                                </div>
                            }
                        </div>
                        <DxFileInput Visible="@false"
                                     MaxFileSize="15000000"
                                     FilesUploading="@OnFilesUploading"
                                     CssClass="dropZone-owner"
                                     ExternalSelectButtonCssSelector="#dropzone-external"
                                     ExternalDropZoneCssSelector="#dropzone-external"
                                     ExternalDropZoneDragOverCssClass="dropzone-hover"
                                     AcceptedFileTypes="@AllowedFileExtensions">
                        </DxFileInput>
                    </div>
                }
            </div>
        }
    </div>

    <button @onclick="PromptAddItems">Añadir Items</button>
</div>

@code {
    List<BreakeableItem> Items { get; set; } = new List<BreakeableItem>();

    async void PromptAddItems()
    {
        string input = await JSRuntime.InvokeAsync<string>("prompt", "¿Cuántos ítems quieres agregar?");
        if (int.TryParse(input, out int count) && count > 0)
        {
            AddItems(count);
        }
    }

    void AddItems(int count)
    {
        for (int i = 0; i < count; i++)
        {
            Items.Add(new BreakeableItem
                {
                    
                });
        }
        StateHasChanged();
    }

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    bool UploadComplete { get; set; } = false;
    byte[] FileBytes { get; set; }
    string FileType { get; set; }
    readonly List<string> AllowedFileExtensions = new() { ".jpg", ".jpeg", ".gif", ".png" };
    int FileSize { get; set; }
    int TotalBytesRead { get; set; }
    async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        UploadComplete = false;
        var file = args.Files[0];
        FileSize = (int)file.Size;
        FileBytes = new byte[FileSize];
        FileType = file.Type;
        var stream = file.OpenReadStream(file.Size);
        TotalBytesRead = 0;
        try
        {
            int bytesReadAsyncCount;
            while ((bytesReadAsyncCount = await stream.ReadAsync(FileBytes, TotalBytesRead, FileSize - TotalBytesRead)) != 0)
            {
                TotalBytesRead += bytesReadAsyncCount;
                await InvokeAsync(StateHasChanged);
            }
        }
        finally
        {
            stream.Close();
        }
        UploadComplete = true;
        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .grid-container {
        display: grid;
        gap: 10px;
    }

    .grid-row {
        display: flex;
        justify-content: space-between;
        color: black;
    }

    .grid-item {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        text-align: center;
        background-color: #f9f9f9;
        margin: 5px;
        height: 150px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

        .grid-item img {
            max-width: 100px;
            height: auto;
            margin-top: 5px;
        }

    button {
        margin-top: 10px;
    }

    #dropzone-external {
        width: 200px;
        height: 200px;
        background-color: rgba(183, 183, 183, 0.1);
        border-width: 2px;
        border-style: dashed;
        padding: 10px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

        #dropzone-external > * {
            pointer-events: none;
        }

        #dropzone-external.dropzone-hover {
            border-style: solid;
        }

    .upload-container > span {
        font-size: 22px;
        font-weight: bold;
        margin-bottom: 16px;
    }

    #dropzone-image {
        max-width: 100%;
        max-height: 100%;
    }

    #dropzone-text > span {
        opacity: 0.5;
    }

    .upload-progress {
        display: flex;
        margin-top: 10px;
    }

    .flex-box {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
</style>
