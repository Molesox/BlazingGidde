@page "/login"

@using BlazingGidde.Shared.Models.Identity
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div style="display: flex; justify-content: center; align-items: center;">
    <Card Class="mb-4" Style="width:30rem;">
        <img class="rounded-top" src="logo-alpsoft.png" alt="placeholder" />
        <CardBody>
            <CardTitle>Login</CardTitle>
            <CardSubTitle Class="mb-2 text-muted">Enter your informations</CardSubTitle>
            <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" placeholder="Saisissez votre adresse mail" @bind-Value="_loginModel.Email" Type="email" />
                    <ValidationMessage For="@(() => _loginModel.Email)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" class="form-control" placeholder="Entrez votre mot de passe" @bind-Value="_loginModel.Password" Type="password" />
                    <ValidationMessage For="@(() => _loginModel.Password)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="_loginModel.RememberMe" />
                    <label for="rememberMe" class="form-check-label">Remember Me</label>
                </div>

                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Outline="true">Entrer</Button>
            </EditForm>
        </CardBody>
    </Card>
</div>

@code {
	[Inject] protected ToastService? ToastService { get; set; }

    private LoginModel _loginModel = new();
    private string _error = "";

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(_loginModel);
        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _error = result.Error!;
            ToastService?.Notify(new(ToastType.Danger, $"Error: {_error}."));
        }
    }
}