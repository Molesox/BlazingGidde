@page "/register"

@using BlazingGidde.Shared.Models.Identity
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        box-sizing: border-box;
        gap: 1rem;
    }

    .register-image img {
        height: auto;
        border-radius: 8px;
    }

    .register-card {
        width: 30rem;
    }

    .register-image img {
        width: 20rem;
    }

</style>

<div class="register-container">

    <div class="login-image">
        <img src="logo-alpsoft.png" alt="Company Logo" />
    </div>

    <Card Class="mb-4" Style="width:20rem;">

            <CardBody>
                <CardTitle>Register</CardTitle>
                <CardSubTitle Class="mb-2 text-muted">Create your account</CardSubTitle>
                <EditForm Model="_registerModel" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="FirstName" class="form-label">First Name</label>
                        <InputText id="FirstName" class="form-control" placeholder="Enter your first name"
                            @bind-Value="_registerModel.FirstName" Type="text" />
                        <ValidationMessage For="@(() => _registerModel.FirstName)" />
                    </div>
                    <div class="mb-3">
                        <label for="LastName" class="form-label">Last Name</label>
                        <InputText id="LastName" class="form-control" placeholder="Enter your ast name"
                            @bind-Value="_registerModel.LastName" Type="text" />
                        <ValidationMessage For="@(() => _registerModel.LastName)" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" placeholder="Enter your email address"
                            @bind-Value="_registerModel.Email" Type="email" />
                        <ValidationMessage For="@(() => _registerModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" class="form-control" placeholder="Enter a password"
                            @bind-Value="_registerModel.Password" Type="password" />
                        <ValidationMessage For="@(() => _registerModel.Password)" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <InputText id="confirmPassword" class="form-control" placeholder="Confirm your password"
                            @bind-Value="_registerModel.ConfirmPassword" Type="password" />
                        <ValidationMessage For="@(() => _registerModel.ConfirmPassword)" />
                    </div>

                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Outline="true">Register</Button>
                </EditForm>
            </CardBody>
        </Card>
</div>

@code {
    [Inject] protected ToastService? ToastService { get; set; }

    private RegisterModel _registerModel = new();
    private string _error = "";

    private async Task HandleRegistration()
    {
        var result = await AuthService.Register(_registerModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            if (result.Errors is not null)
            {
                _error = string.Join("<br>", result.Errors);
                ToastService?.Notify(new(ToastType.Danger, $"Error: {_error}."));
            }


            await InvokeAsync(StateHasChanged);
        }
    }
}