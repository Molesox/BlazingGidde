@page "/person"
@using BlazingGidde.Client.Services

@using BlazingGidde.Shared.Models.PersonMain
@using BlazingGidde.Shared.Models.PersonMain.Details
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@inject PersonMainManager personManager
@attribute [Authorize]

<PageTitle>Application Person</PageTitle>

<h3>Person</h3>

<SfToast ID="toast_default" @ref="ToastObj" Title="Error" Content="@ToastContent" Timeout="5000" Icon="e-meeting">
	<ToastPosition X="@ToastPosition"></ToastPosition>
</SfToast>


<!-- #region -->

<SfGrid @ref="Grid" DataSource="@Persons"
        Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" TValue="Person">
	<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog">
 
		<Template>
			@{
				var person = (context as Person);
			}
 

			<div class="row" style="padding-top: 20px;">
				<!-- PersonID -->
				<div class="form-group col-md-6">
					<SfNumericTextBox ID="PersonID" @bind-Value="person.PersonID" Enabled="@Check"
					                  FloatLabelType="FloatLabelType.Always" Placeholder="Person ID"></SfNumericTextBox>
				</div>

				<!-- FirstName -->
				<div class="form-group col-md-6">
					<SfTextBox ID="FirstName" @bind-Value="person.FirstName" Enabled="@Enabled" Placeholder="First Name"
					           FloatLabelType="FloatLabelType.Always"></SfTextBox>
					<ValidationMessage For="@(() => person.FirstName)" style="color: #dc3545; height: 0px;"/>
				</div>

				<!-- LastName -->
				<div class="form-group col-md-6">
					<SfTextBox ID="LastName" @bind-Value="person.LastName" Enabled="@Enabled" Placeholder="Last Name"
					           FloatLabelType="FloatLabelType.Always"></SfTextBox>
					<ValidationMessage For="@(() => person.LastName)" style="color: #dc3545; height: 0px;"/>
				</div>

				<!-- Title -->
				<div class="form-group col-md-6">
					<SfTextBox ID="Title" @bind-Value="person.Title" Enabled="@Enabled" Placeholder="Title"
					           FloatLabelType="FloatLabelType.Always"></SfTextBox>
					<ValidationMessage For="@(() => person.Title)" style="color: #dc3545; height: 0px;"/>
				</div>

				<!-- Culture -->
				<div class="form-group col-md-6">
					<SfTextBox ID="Culture" @bind-Value="person.Culture" Enabled="@Enabled" Placeholder="Culture"
					           FloatLabelType="FloatLabelType.Always"></SfTextBox>
					<ValidationMessage For="@(() => person.Culture)" style="color: #dc3545; height: 0px;"/>
				</div>

				<!-- VatNumber -->
				<div class="form-group col-md-6">
					<SfTextBox ID="VatNumber" @bind-Value="person.VatNumber" Enabled="@Enabled" Placeholder="VAT Number"
					           FloatLabelType="FloatLabelType.Always"></SfTextBox>
					<ValidationMessage For="@(() => person.VatNumber)" style="color: #dc3545; height: 0px;"/>
				</div>

				<!-- Remarks -->
				<div class="form-group col-md-6">
					<SfTextBox ID="Remarks" @bind-Value="person.Remarks" Enabled="@Enabled" Placeholder="Remarks"
					           FloatLabelType="FloatLabelType.Always"></SfTextBox>
					<ValidationMessage For="@(() => person.Remarks)" style="color: #dc3545; height: 0px;"/>
				</div>

				<!-- AnnualRevenue -->
				<div class="form-group col-md-6">
					<SfNumericTextBox ID="AnnualRevenue" @bind-Value="person.AnnualRevenue" TValue="decimal?"
					                  Enabled="@Enabled" Placeholder="Annual Revenue" FloatLabelType="FloatLabelType.Always">
					</SfNumericTextBox>
					<ValidationMessage For="@(() => person.AnnualRevenue)" style="color: #dc3545; height: 0px;"/>
				</div>
			</div>
			<SfGrid TValue="Phone"
			        DataSource="@GridData" Query="@(new Query().Where("EmployeeID", "equal", RowIndex))"
			        Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
				<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal">

				</GridEditSettings>

				<GridColumns>
					<GridColumn Field="PhoneID" HeaderText="ID" TextAlign="TextAlign.Left" Width="150" IsPrimaryKey="true"
					            AllowEditing="false"></GridColumn>
					<GridColumn Field="PhoneNumber" HeaderText="Phone number" TextAlign="TextAlign.Left" Width="150"></GridColumn>

				</GridColumns>

			</SfGrid>
		</Template>
	</GridEditSettings>
	<GridEvents RowSelected="RowSelecthandler" OnActionBegin="ActionBeginHandler" OnActionFailure="ActionFailureHandler" TValue="Person"></GridEvents>

	<GridColumns>
		<GridColumn Field="PersonID" HeaderText="ID" TextAlign="TextAlign.Left" Width="150" IsPrimaryKey="true" AllowEditing="false"></GridColumn>
		<GridColumn Field="FirstName" HeaderText="First Name" TextAlign="TextAlign.Left" Width="150"></GridColumn>
		<GridColumn Field="LastName" HeaderText="Last Name" TextAlign="TextAlign.Left" Width="150"></GridColumn>
		<GridColumn Field="Culture" HeaderText="Culture" TextAlign="TextAlign.Left" Width="100"></GridColumn>
		<GridColumn Field="Title" HeaderText="Title" TextAlign="TextAlign.Left" Width="100"></GridColumn>
		<GridColumn Field="VatNumber" HeaderText="VAT Number" TextAlign="TextAlign.Left" Width="120"></GridColumn>
		<GridColumn Field="AnnualRevenue" HeaderText="Annual Revenue" TextAlign="TextAlign.Right" Format="C" Width="150"></GridColumn>
		<GridColumn Field="Remarks" HeaderText="Remarks" TextAlign="TextAlign.Left" Width="200"></GridColumn>
		<GridColumn Field="Phones" HeaderText="Phones" Visible="false" TextAlign="TextAlign.Left" Width="200"></GridColumn>
	</GridColumns>
</SfGrid>

@code {

	SfToast ToastObj = new();
	SfGrid<Person> Grid;
	public IEnumerable<Phone> GridData { get; set; }
	public int? RowIndex { get; set; } = 1003;

	private string ToastPosition = "Right";
	private string ToastContent = "Uhmm...";
	public Person SelectedData = new Person();
	private Boolean Check = false;
	private Boolean Disabled = true;
	private Boolean Enabled = true;
	private List<Person> Persons { get; set; }

	private List<CultureInfo> CultureList { get; set; } = new List<CultureInfo>
{
new CultureInfo { CultureCode = "en-US", CultureName = "English (United States)" },
// Add more cultures as needed
};

	public class CultureInfo
	{
		public string CultureCode { get; set; }
		public string CultureName { get; set; }
	}
	public async Task RowSelecthandler(RowSelectEventArgs<Person> Args)
	{
		RowIndex = Args.Data.PersonID;
		GridData = await personManager.GetPhonesByPersonId(RowIndex.Value);

	}
	protected override async void OnInitialized()
	{
		Persons = (await personManager.GetAll()).ToList();

		StateHasChanged();
	}
	public async void ActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
	{
		ToastContent = args.Error.ToString();
		await ToastObj.ShowAsync();
	}

	public async Task Save()
	{
		if ((SelectedData.PersonID != null))
		{
			@* await this.Grid.SetRowDataAsync(SelectedData.OrderID, SelectedData); *@
			await Cancel();
		}
	}
	public async Task Cancel()
	{
		@* SelectedData = new OrderDetails() { }; *@
		await this.Grid.ClearSelectionAsync();
	}
	public async Task ActionBeginHandler(ActionEventArgs<Person> args)
	{
		if (args.RequestType.ToString() == "Save")
		{

			var person = await personManager.Update(args.Data);

			if (person is null)
			{
				ToastContent = "Error adding person";
				await ToastObj.ShowAsync();
			}
			Check = true;
		}
		else
		{
			Check = false;
		}
	}
}
