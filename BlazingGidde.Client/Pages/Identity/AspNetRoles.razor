@page "/approles"
@using AgileObjects.AgileMapper.Extensions
@using BlazingGidde.Client.Services
@using BlazingGidde.Client

@using BlazingGidde.Shared.Models.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using BlazingGidde.Client.Shared
@inject AspNetRoleManager roleManager
@attribute [Authorize]

<PageTitle>Application roles</PageTitle>

<DxGrid Data="@Data" @ref="@Grid" EditMode="GridEditMode.PopupEditForm" CustomizeEditModel="Grid_CustomizeEditModel"
    EditModelSaving="Grid_EditModelSaving">
    <Columns>
        <DxGridCommandColumn></DxGridCommandColumn>
        <DxGridDataColumn Caption="Id" FieldName="Id">
        </DxGridDataColumn>

        <DxGridDataColumn Caption="Employee Name" FieldName="Name">
        </DxGridDataColumn>

        <DxGridDataColumn Caption="Normalized Name" FieldName="NormalizedName">
        </DxGridDataColumn>
    </Columns>

    <EditFormTemplate Context="EditFormContext">
        @{
            var role = (FlowRole)EditFormContext.EditModel;
        }
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem Caption="Id" ColSpanMd="6">
                @EditFormContext.GetEditor("Id")
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Employee Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("Name")
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Normalized Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("NormalizedName")
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

@code {
    IGrid Grid { get; set; }
    object Data { get; set; }

    protected override void OnInitialized()
    {
        Data = roleManager.Get();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedRole = (FlowRole)e.EditModel;
        var result = e.IsNew == false ? await roleManager.Update(editedRole) : await roleManager.Insert(editedRole);
        
        if (result is not null)
        {
            // Handle errors (e.g., display a notification)
            // You can access error messages from result.Errors
        }
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dataItem = (FlowRole)e.DataItem;
        if (dataItem == null)
            e.EditModel = new FlowRole { };
        else
        {
            e.EditModel = dataItem.Map().ToANew<FlowRole>();
        }
    }
}
