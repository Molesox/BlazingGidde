@page "/approles"
@using BlazingGidde.Client.Services

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Syncfusion.Blazor.Data
@inject AspNetRoleManager RoleManager
@attribute [Authorize]

<PageTitle>Application roles</PageTitle>

<h3>Roles</h3>

@if (_isLoading)
{
    <p>Loading...</p>
}
else
{
    
    <SfGrid  EnableAdaptiveUI="true" DataSource="@Roles" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" TValue="IdentityRole">
        <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
        <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="IdentityRole"></GridEvents>
        <GridColumns>
            <GridColumn Field="Id" HeaderText="ID" TextAlign="TextAlign.Left" Width="150" IsPrimaryKey="true" AllowEditing="false"></GridColumn>
            <GridColumn Field="Name" HeaderText="Role Name" TextAlign="TextAlign.Left" Width="200"></GridColumn>
            <GridColumn Field="NormalizedName" HeaderText="Normalized Name" TextAlign="TextAlign.Left" Width="200" AllowEditing="false"></GridColumn>
            <GridColumn Field="ConcurrencyStamp" HeaderText="Concurrency Stamp" TextAlign="TextAlign.Left" Width="250" AllowEditing="false" Visible="false"></GridColumn>
        </GridColumns>
    </SfGrid>
    <RolesUserTree></RolesUserTree>
}

@code {
    private List<IdentityRole> Roles { get; set; } = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        Roles = (await RoleManager.GetAll()).ToList();
        _isLoading = false;
    }

    private async Task ActionBeginHandler(ActionEventArgs<IdentityRole> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await RoleManager.Insert(args.Data);
            }
            else
            {
                await RoleManager.Update(args.Data);
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await RoleManager.Delete(args.Data.Id);
        }
    }

    private async Task ActionCompleteHandler(ActionEventArgs<IdentityRole> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            Roles = (await RoleManager.GetAll()).ToList(); // Refresh grid data
        }
    }
}
