@page "/approles"
@using BlazingGidde.Shared.DTOs.FlowCheck

@inject AspNetRoleManager roleManager

@attribute [Authorize(Roles = "admin")]

<PageTitle>Application roles</PageTitle>

<div class="container mt-5">
    <DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen"/>
    <div class="h-100 grid-wrapper">
        <DxGrid Data="@Data" @ref="@Grid" EditMode="GridEditMode.PopupEditForm"
                CustomizeEditModel="Grid_CustomizeEditModel" AllowColumnReorder="true" AllowGroup="true" AllowSort="true"
                ShowGroupPanel="true" ShowGroupedColumns="true" SearchBoxNullText="Buscar..."
                ShowFilterRow="true" ShowSearchBox="true" DataItemDeleting="Grid_DataItemDeleting" EditModelSaving="Grid_EditModelSaving">
            <Columns>
                
                <DxGridDataColumn Caption="Id" FieldName="Id"
                                  TextAlignment="GridTextAlignment.Left" Visible="@(!isXSmallScreen)" CaptionAlignment="GridTextAlignment.Left">
                </DxGridDataColumn>
                
                <DxGridDataColumn Caption="Employee Name" FieldName="Name"
                                  TextAlignment="GridTextAlignment.Left" Visible="@(!isXSmallScreen)" CaptionAlignment="GridTextAlignment.Left">
                </DxGridDataColumn>

                <DxGridDataColumn Caption="Normalized Name" FieldName="NormalizedName"
                                  TextAlignment="GridTextAlignment.Left" CaptionAlignment="GridTextAlignment.Left">
                </DxGridDataColumn>
                <DxGridCommandColumn Width="100px" FixedPosition="GridColumnFixedPosition.Left" NewButtonVisible="false"
                                     Caption="Acciones" TextAlignment="GridTextAlignment.Center" CaptionAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate Context="gridcontext">
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                  RenderStyle="ButtonRenderStyle.Success" IconCssClass="oi oi-pencil"
                                  Click="@(() => Grid.StartEditDataItemAsync(gridcontext.DataItem))">
                        </DxButton>
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                  RenderStyle="ButtonRenderStyle.Danger" CssClass="grid-delete-btn" IconCssClass="oi oi-trash"
                                  Click="@(() => DeleteRow(gridcontext.VisibleIndex))">
                        </DxButton>
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
            </Columns>

            <EditFormTemplate Context="EditFormContext">
                @{
                    var role = (FlowRoleDto)EditFormContext.EditModel;
                }
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem Caption="Id" ColSpanMd="6">
                        @EditFormContext.GetEditor("Id")
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Employee Name:" ColSpanMd="6">
                        @EditFormContext.GetEditor("Name")
                    </DxFormLayoutItem>

                    <DxFormLayoutItem Caption="Normalized Name:" ColSpanMd="6">
                        @EditFormContext.GetEditor("NormalizedName")
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditFormTemplate>
        </DxGrid>
    </div>
</div>


@code {
    IGrid Grid { get; set; }
    object Data { get; set; }
    bool isXSmallScreen;

    protected override void OnInitialized()
    {
        Data = roleManager.Get();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedRole = (FlowRoleDto)e.EditModel;
        var result = e.IsNew == false ? await roleManager.Update(editedRole) : await roleManager.Insert(editedRole);

        if (result is not null)
        {
            // Handle errors (e.g., display a notification)
            // You can access error messages from result.Errors
        }
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var dataItem = (FlowRoleDto)e.DataItem;
        if (dataItem == null)
            e.EditModel = new FlowRoleDto();
        else
        {
            e.EditModel = dataItem.Map().ToANew<FlowRoleDto>();
        }
    }

    private void DeleteRow(int visibleIndex)
    {
        Grid?.ShowRowDeleteConfirmation(visibleIndex);
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var dataItem = (FlowRoleDto)e.DataItem;

        await roleManager.Delete(dataItem.Id);
        Grid?.Reload();
    }

}