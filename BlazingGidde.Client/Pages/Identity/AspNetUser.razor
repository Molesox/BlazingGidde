@page "/appusers"
@using BlazingGidde.Client.Services
@using BlazingGidde.Client.Shared
@using BlazingGidde.Shared.Models.Identity
@using BlazingGidde.Shared.Models.Patois
@using BlazingGidde.Shared.DTOs.Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inject AspNetUserManager UserManager
@inject AspNetRoleManager RoleManager
@inject UserRoleManager UserRoleManager

@attribute [Authorize]

<PageTitle>Application Users</PageTitle>

<CustomGrid TEntity="FlowUser" Tkey="string" Repository="@UserManager"
 TCreateDto="FlowUser" TUpdateDto="FlowUser"
    TReadDto="FlowUser">

    <GridColumns>
        <!-- ID Column -->
        <GridColumn TItem="FlowUser" HeaderText="ID" PropertyName="Id">
            <ChildContent Context="item">@item.Id</ChildContent>
        </GridColumn>

        <!-- User Name Column -->
        <GridColumn TItem="FlowUser" HeaderText="User Name" PropertyName="UserName">
            <ChildContent Context="item">@item.UserName</ChildContent>
        </GridColumn>

        <!-- Email Column -->
        <GridColumn TItem="FlowUser" HeaderText="Email" PropertyName="Email">
            <ChildContent Context="item">@item.Email</ChildContent>
        </GridColumn>

        <!-- Phone Number Column -->
        <GridColumn TItem="FlowUser" HeaderText="Phone Number" PropertyName="PhoneNumber">
            <ChildContent Context="item">@item.PhoneNumber</ChildContent>
        </GridColumn>

        <!-- Lockout Enabled Column -->
        <GridColumn TItem="FlowUser" HeaderText="Lockout Enabled" PropertyName="LockoutEnabled">
            <ChildContent Context="item">@item.LockoutEnabled</ChildContent>
        </GridColumn>

        <!-- Two-Factor Enabled Column -->
        <GridColumn TItem="FlowUser" HeaderText="Two-Factor Enabled" PropertyName="TwoFactorEnabled">
            <ChildContent Context="item">@item.TwoFactorEnabled</ChildContent>
        </GridColumn>

        <!-- Actions Column -->
        @* <GridColumn TItem="FlowUser" HeaderText="Actions">
            <ChildContent Context="item">
                <button class="btn btn-primary btn-sm me-2" @onclick="() => EditUser(item)">
                    <span class="material-icons">edit</span>
                </button>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(item.Id)">
                    <span class="material-icons">delete</span>
                </button>
            </ChildContent>
        </GridColumn> *@
    </GridColumns>

    <EditFormTemplate Context="user">
        <div class="card">
            <div class="card-header">
                <h5>User Information</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">User Name</label>
                            <InputText class="form-control" @bind-Value="user.UserName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="user.Email" type="email" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <InputText class="form-control" @bind-Value="user.PhoneNumber" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="user.LockoutEnabled" />
                            <label class="form-check-label">Lockout Enabled</label>
                        </div>
                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="user.TwoFactorEnabled" />
                            <label class="form-check-label">Two-Factor Authentication Enabled</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h5>Role Management</h5>
            </div>
            <div class="card-body">
                <div>
                    <h6>Assign Role</h6>
                    <div class="input-group mb-3">
                        <InputSelect class="form-control" @bind-Value="selectedRole">
                            <option value="" disabled>Select a Role</option>
                            @if (_roles != null)
                            {
                                @foreach (var role in _roles)
                                {
                                    <option value="@role.Name">@role.Name</option>
                                }
                            }
                        </InputSelect>
                        <button class="btn btn-primary" @onclick="() => AssignRole(user.Id)">Assign</button>
                    </div>
                </div>

                <div>
                    <h6>Current Roles</h6>
                    @if (userRoles.ContainsKey(user.Id) && userRoles[user.Id].Any())
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Role</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var role in userRoles[user.Id])
                                {
                                    <tr>
                                        <td>@role</td>
                                        <td>

                                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveRole(user.Id, role)">
                                                <span class="material-icons">delete</span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No roles assigned.</p>
                    }
                </div>
            </div>
        </div>
    </EditFormTemplate>
</CustomGrid>

@code {

    private IEnumerable<IdentityRole>? _roles;
    private string? selectedRole;
    private Dictionary<string, List<string>> userRoles = new();

    protected override async Task OnInitializedAsync()
    {
        _roles = await RoleManager.GetAll();
        await LoadUserRoles();

    }

    private async Task AssignRole(string userId)
    {
        if (!string.IsNullOrEmpty(selectedRole))
        {
            var dto = new AssignRoleDto { UserId = userId, RoleName = selectedRole };
            var response = await UserRoleManager.AssignRole(dto);
            if (response.Success)
            {
                await LoadUserRoles();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error assigning role: {string.Join(", ", response.ErrorMessages)}");
            }
        }
    }

    private async Task RemoveRole(string userId, string roleName)
    {
        var dto = new AssignRoleDto { UserId = userId, RoleName = roleName };
        var response = await UserRoleManager.RemoveRole(dto);
        if (response.Success)
        {
            await LoadUserRoles();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Error removing role: {string.Join(", ", response.ErrorMessages)}");
        }
    }

    private async Task LoadUserRoles()
    {
        userRoles.Clear();
        var allUsers = await UserManager.GetAll();
        if (allUsers != null)
        {
            foreach (var user in allUsers)
            {
                var response = await UserRoleManager.GetRoles(user.Id);
                if (response.Success && response.Items != null)
                {
                    userRoles[user.Id] = response.Items.ToList();
                }
            }
        }
    }
}
