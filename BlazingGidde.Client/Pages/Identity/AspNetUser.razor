@page "/aspnetusers"
@using BlazingGidde.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AspNetUserManager UserManager
@attribute [Authorize]

<PageTitle>AspNetUsers</PageTitle>

<h3>AspNetUsers</h3>

@if (_isLoading)
{
	<p>Loading...</p>
}
else if (_users is null || !_users.Any())
{
	<p>No users available.</p>
}
else
{
	<SfGrid DataSource="@_users" AllowPaging="true" AllowSorting="true" EditSettings="@gridEditSettings" Toolbar="@(new List<string>() { "Add", "Edit", "Delete" })">
		<GridColumns>
			<GridColumn Field="@nameof(IdentityUser.Id)" HeaderText="ID" TextAlign="TextAlign.Left" Width="150" AllowEditing=false></GridColumn>
			<GridColumn Field="@nameof(IdentityUser.UserName)" HeaderText="User Name" TextAlign="TextAlign.Left" Width="150"></GridColumn>
			<GridColumn Field="@nameof(IdentityUser.Email)" HeaderText="Email" TextAlign="TextAlign.Left" Width="200"></GridColumn>
			<GridColumn Field="@nameof(IdentityUser.PhoneNumber)" HeaderText="Phone Number" TextAlign="TextAlign.Left" Width="150"></GridColumn>
			<GridColumn HeaderText="Manage Users" Width="150">
				<GridCommandColumns>
					<GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
					<GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
					<GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
					<GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
				</GridCommandColumns>
			</GridColumn>
		</GridColumns>
 
	</SfGrid>
}

@code {

	private GridEditSettings gridEditSettings = new()
	{
		AllowAdding = true,
		AllowDeleting = true,
		AllowEditOnDblClick = true,
		AllowEditing = true,
		Mode = EditMode.Dialog,
		ShowConfirmDialog = true,
		ShowDeleteConfirmDialog = true,
		
	};
	private IEnumerable<IdentityUser>? _users;
	private bool _isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		await LoadUsers();
	}

	private async Task LoadUsers()
	{
		_isLoading = true;

		try
		{
			_users = await UserManager.GetAll();
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"Error loading users: {ex.Message}");
		}
		finally
		{
			_isLoading = false;
		}
	}

	private void EditUser(string id)
	{
		// Navigate to edit page or implement edit logic
		Console.WriteLine($"Edit user with ID: {id}");
	}

	private async Task DeleteUser(string id)
	{
		if (await UserManager.Delete(id))
		{
			Console.WriteLine($"Deleted user with ID: {id}");
			await LoadUsers();
		}
		else
		{
			Console.Error.WriteLine($"Failed to delete user with ID: {id}");
		}
	}

}