@page "/appusers"
@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.FlowCheck.Request

@inject AspNetUserManager UserManager
@inject AspNetRoleManager RoleManager
@inject UserRoleManager UserRoleManager

@attribute [Authorize(Roles = "admin")]

<PageTitle>Application Users</PageTitle>

<h3>Usuarios</h3>

<div class="container mt-5">
    <DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen"/>
    <div class="h-100 grid-wrapper">
        <DxGrid Data="@Users" @ref="Grid" CssClass="grid-style" EditMode="GridEditMode.PopupEditForm"
                AllowColumnReorder="true" AllowGroup="true" AllowSort="true" ShowGroupPanel="true" ShowFilterRow="true"
                ShowSearchBox="true" EditModelSaving="Grid_EditModelSaving" DataItemDeleting="Grid_DataItemDeleting"
                CustomizeEditModel="Grid_CustomizeEditModel">

            <Columns>
                <DxGridCommandColumn Width="100px" FixedPosition="GridColumnFixedPosition.Left" NewButtonVisible="true"
                                     Caption="Actions" TextAlignment="GridTextAlignment.Center" CaptionAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate Context="gridcontext">
                        <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Primary"
                                  IconCssClass="oi oi-eye" Click="@(() => ViewRoles(gridcontext.DataItem))" />
                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Success"
                                  IconCssClass="oi oi-pencil"
                                  Click="@(async () =>
                                 {
                                     if (Grid is not null) await Grid.StartEditDataItemAsync(gridcontext.DataItem);
                                 })" />
                        <DxButton RenderStyleMode="ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Danger"
                                  IconCssClass="oi oi-trash" Click="@(() => DeleteUser(gridcontext.VisibleIndex))" />
                    </CellDisplayTemplate>
                </DxGridCommandColumn>
                <AuthorizeView Roles="admin">
                    <DxGridDataColumn Caption="Id" FieldName="PersonId" TextAlignment="GridTextAlignment.Center" Visible="@(!isXSmallScreen)" Width="50px" />
                </AuthorizeView>
                <DxGridDataColumn Caption="Nombre completo" FieldName="PersonFullName" TextAlignment="GridTextAlignment.Left" />
                <DxGridDataColumn Caption="Email" FieldName="Email" TextAlignment="GridTextAlignment.Left" Visible="@(!isXSmallScreen)">
                    <CellDisplayTemplate Context="gridContext">
                        <a href="mailto:@gridContext.Value" style="color: blue; text-decoration: underline;">
                            @gridContext.Value
                        </a>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn Caption="Phone Number" CaptionAlignment="GridTextAlignment.Center" FieldName="PhoneNumber"
                                  TextAlignment="GridTextAlignment.Center" Visible="@(!isXSmallScreen)" />
                <DxGridDataColumn Caption="Two-Factor Enabled" FieldName="TwoFactorEnabled"
                                  TextAlignment="GridTextAlignment.Center" Visible="@(!isXSmallScreen)" />

            </Columns>

            <EditFormTemplate Context="EditFormContext">
                @{
                    var user = (CreateFlowUserDto)EditFormContext.EditModel;
                }
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutGroup>
                        <DxFormLayoutItem Caption="Id">
                            @EditFormContext.GetEditor("PersonId")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Full Name">
                            @EditFormContext.GetEditor("PersonFullName")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Email">
                            @EditFormContext.GetEditor("Email")
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Phone Number">
                            @EditFormContext.GetEditor("PhoneNumber")
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>



                </DxFormLayout>
            </EditFormTemplate>
        </DxGrid>
    </div>
    
</div>

@code {
    IGrid? Grid { get; set; }
    object? Users { get; set; }
    bool isXSmallScreen;

    IEnumerable<FlowRoleDto> Roles { get; set; }
    IEnumerable<string> Tags { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        Users = UserManager.Get();
        Roles = await RoleManager.GetAll();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editedUser = (CreateFlowUserDto)e.EditModel;


        editedUser.FlowRoles = Mapper.Map(Tags).Over(editedUser.FlowRoles);

        if (e.IsNew)
        {
            await UserManager.Insert(editedUser);
        }
        else
        {
            await UserManager.Update(editedUser);
        }

        Grid?.Reload();
        Tags = Enumerable<string>.Empty;
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var user = (FlowUserDto)e.DataItem;
        await UserManager.Delete(user.Id);

        Grid?.Reload();
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var user = (FlowUserDto)e.DataItem;

        if (user == null)
        {
            e.EditModel = new CreateFlowUserDto();
        }
        else
        {
            var editModel = await UserManager.GetEditModelByID(user.Id);

            e.EditModel = editModel ?? new CreateFlowUserDto();
            Tags = editModel.FlowRoles.Select(r => r.Name);
        }
    }

    void ViewRoles(object dataItem)
    {
        var user = (FlowUserDto)dataItem;
        // Navigate to role management or display roles
    }

    void DeleteUser(int visibleIndex)
    {
        Grid?.ShowRowDeleteConfirmation(visibleIndex);
    }

}