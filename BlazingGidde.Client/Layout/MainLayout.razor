@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<DxLayoutBreakpoint MaxWidth="1200" @bind-IsActive="@IsMobileLayout" />

<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if (IsMobileLayout)
            {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                @if (isAuthorized)
                {
                    <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                }
                <DxGridLayoutRow Areas="content" />
            }
            else
            {
                <DxGridLayoutRow Areas="header header" Height="auto" />
                <DxGridLayoutRow Areas="@(isAuthorized && IsSidebarExpanded ? "sidebar content" : "content content")" />
            }
        </Rows>
        <Columns>
            @if (!IsMobileLayout && isAuthorized)
            {
                <DxGridLayoutColumn Width="auto" />
                <DxGridLayoutColumn />
            }
            else
            {
                <DxGridLayoutColumn Width="0" />
                <DxGridLayoutColumn />
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header" CssClass="layout-item">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" />
                </Template>
            </DxGridLayoutItem>
            @if (isAuthorized)
            {
                <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                    <Template>
                        <NavMenu StateCssClass="@NavMenuCssClass" />
                    </Template>
                </DxGridLayoutItem>
            }
            <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                <Template>
                    <div class="main">
                        <div class="content">
                            @Body
                        </div>
                        <div class="content-footer"></div>
                    </div>
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>

@code {
    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout
    {
        get => _isMobileLayout;
        set
        {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded
    {
        get => _isSidebarExpanded;
        set
        {
            if (_isSidebarExpanded != value)
            {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    bool isAuthorized = false;

    // Receive the authentication state via CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to location changes
        NavigationManager.LocationChanged += OnLocationChanged;

        // Get the initial authentication state
        var authState = await AuthenticationStateTask;
        isAuthorized = authState.User.Identity?.IsAuthenticated ?? false;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (IsMobileLayout)
        {
            IsSidebarExpanded = false;
        }

        // Update the authorization state on navigation
        var authState = await AuthenticationStateTask;
        isAuthorized = authState.User.Identity?.IsAuthenticated ?? false;

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}