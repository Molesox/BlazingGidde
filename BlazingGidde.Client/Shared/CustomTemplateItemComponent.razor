@inject IJSRuntime JS
<style>
    .upload-button {
        width: 100%;
        margin-top: 5px;
        padding:3px;
    }
</style>


<div id="@Id" class="upload-container">
   
        <div id="@($"dropzone-external-{Id}")" class="@((IsReadOnly) ? string.Empty : "dropzone-external")">

            @if (UploadComplete || IsBase64Image(Value))
            {
                <img id="dropzone-image" src="@Value" alt="imagen descargada"/>
            }
            else if (IsUploading || TotalBytesRead != 0)
            {
                <DxWaitIndicator Visible="true"
                                 CssClass="upload-progress"
                                 AnimationType="WaitIndicatorAnimationType.Pulse"/>
            }
            else
            {
                <div id="dropzone-text" class="flex-box h-100">
                    <span>Arrastra y suelta el archivo deseado</span>
                </div>
            }
        </div>
    </div>
 
@if (!IsReadOnly)
{
    <DxButton id="@($"upload-button-{Id}")" CssClass="upload-button"
              RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Outline" Text="Cambiar"/>
}


<DxFileInput Visible="false" MaxFileSize="15000000" FilesUploading="@OnFilesUploading" CssClass="dropZone-owner"
             ExternalSelectButtonCssSelector="@($"#upload-button-{Id}")"
             ExternalDropZoneCssSelector="@($"#dropzone-external-{Id}")" ExternalDropZoneDragOverCssClass="dropzone-hover"
             AcceptedFileTypes="@AllowedFileExtensions">
</DxFileInput>


@code {

    [Parameter] public int Id { get; set; }

    [Parameter] public string? Value { get; set; }

    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public bool IsReadOnly { get; set; } = false;

    // Internal state
    private bool UploadComplete { get; set; } = false;
    private byte[]? FileBytes { get; set; }
    private string? FileType { get; set; }
    private readonly List<string> AllowedFileExtensions = new() { ".jpg", ".jpeg", ".gif", ".png" };
    private int FileSize { get; set; }
    private int TotalBytesRead { get; set; }
    private bool IsUploading { get; set; } = false;

    private bool IsBase64Image(string? data)
    {
        return !string.IsNullOrWhiteSpace(data) && data.StartsWith("data:image/", StringComparison.OrdinalIgnoreCase);
    }

    private async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        UploadComplete = false;
        TotalBytesRead = 0;
        Value = null;
        IsUploading = true;
        StateHasChanged();

        // For simplicity, handle only the first file
        var file = args.Files[0];
        FileSize = (int)file.Size;
        FileBytes = new byte[FileSize];
        FileType = file.Type;

        await using var stream = file.OpenReadStream(file.Size);
        try
        {
            int bytesRead;
            while ((bytesRead = await stream.ReadAsync(FileBytes, TotalBytesRead, FileSize - TotalBytesRead)) != 0)
            {
                TotalBytesRead += bytesRead;
                StateHasChanged();
            }
        }
        finally
        {
            stream.Close();
        }

        // Build the Base64 string
        Value = $"data:{FileType};base64,{Convert.ToBase64String(FileBytes ?? Array.Empty<byte>())}";

        Value = await JS.InvokeAsync<string>(
            "imageResizer.resize",
            Value,
            800, // max width
            600 // max height
        );

        // Mark upload as complete
        UploadComplete = true;
        IsUploading = false;
        StateHasChanged();
        await ValueChanged.InvokeAsync(Value);
    }


}