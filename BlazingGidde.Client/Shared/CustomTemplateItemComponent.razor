@using DevExpress.Blazor
@inject IJSRuntime JS

<div id="@Id" class="upload-container">

    <div id="@($"dropzone-external-{Id}")" class="dropzone-external card flex-box">
        @if (UploadComplete || IsBase64Image(Value))
        {
               <img id="dropzone-image"
                 src="@Value"
                 alt="DxFileInput uploaded image" />
        }
        else if (TotalBytesRead != 0)
        {
            <DxProgressBar CssClass="upload-progress" Value="@TotalBytesRead" MaxValue="@FileSize"
                Label="@(TotalBytesRead == FileSize ? "Your image is almost ready..." : string.Empty)" />
        }
        else
        {
            <div id="dropzone-text" class="flex-box">
                <span>Arrastra y suelta el archivo deseado</span>
            </div>
        }
    </div>
     <DxButton id="@($"upload-button-{Id}")"
              CssClass="m-1"
                style="max-width: 100%;"
              RenderStyle="ButtonRenderStyle.Primary"
              Text="Subir" />

    <DxFileInput Visible="false" MaxFileSize="15000000" 
    FilesUploading="@OnFilesUploading" 
    CssClass="dropZone-owner"
        ExternalSelectButtonCssSelector="@($"#upload-button-{Id}")"
        ExternalDropZoneCssSelector="@($"#dropzone-external-{Id}")" 
        ExternalDropZoneDragOverCssClass="dropzone-hover"
        AcceptedFileTypes="@AllowedFileExtensions">
    </DxFileInput>
</div>


@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    // Internal state
    private bool UploadComplete { get; set; } = false;
    private byte[]? FileBytes { get; set; }
    private string? FileType { get; set; }
    private readonly List<string> AllowedFileExtensions = new() { ".jpg", ".jpeg", ".gif", ".png" };
    private int FileSize { get; set; }
    private int TotalBytesRead { get; set; }

    private bool IsBase64Image(string? data) 
        => !string.IsNullOrWhiteSpace(data) && data.StartsWith("data:image/", StringComparison.OrdinalIgnoreCase);

    private async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        UploadComplete = false;

        // For simplicity, handle only the first file
        var file = args.Files[0];
        FileSize = (int)file.Size;
        FileBytes = new byte[FileSize];
        FileType = file.Type;

        using var stream = file.OpenReadStream(file.Size);
        TotalBytesRead = 0;

        try
        {
            int bytesRead;
            while ((bytesRead = await stream.ReadAsync(FileBytes, TotalBytesRead, FileSize - TotalBytesRead)) != 0)
            {
                TotalBytesRead += bytesRead;
            }
        }
        finally
        {
            stream.Close();
        }

        // Build the Base64 string
        Value = $"data:{FileType};base64,{Convert.ToBase64String(FileBytes ?? Array.Empty<byte>())}";

        Value = await JS.InvokeAsync<string>(
            "imageResizer.resize", 
            Value,
            800,        // max width
            600         // max height
        );

        // Mark upload as complete
        UploadComplete = true;

        await ValueChanged.InvokeAsync(Value);

    }
}