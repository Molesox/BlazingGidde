@using BlazingGidde.Shared.DTOs.FlowCheck
@using BlazingGidde.Shared.DTOs.Person
@using BlazingGidde.Shared.Repository
@using BlazingGidde.Shared.Models.PersonMain

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PersonMainManager personManager
@inject IJSRuntime JSRuntime
@inject ThemeService ThemeService
@inject AspNetUserManager UserManager
@inject PersonMainManager PersonManager

<AuthorizeView>
    <Authorized>
        <div class="card menu-card-container w-100">
            <div class="card-body p-0">
                <DxMenu CollapseItemsToHamburgerMenu="true"
                        CollapseItemToIconMode="MenuCollapseItemToIconMode.Sequentially"
                        DisplayMode="MenuDisplayMode.Desktop">
                    <Items>
                        <DxMenuItem Text="@Title"  IconCssClass="fa fa">
                            <Items>
                                <DxMenuItem Text="Mi perfil" IconCssClass="fa fa-user" NavigateUrl="/myprofile" Target="_self" />
                                <DxMenuItem Text="Tema" IconCssClass="fa fa-paint-brush">
                                    <Items>
                                        <DxMenuItem Text="Dark" IconCssClass="fa fa-square" CssClass="menu-dark" />
                                        <DxMenuItem Text="White" IconCssClass="fa fa-square" CssClass="menu-white" />
                                        <DxMenuItem Text="Purple" IconCssClass="fa fa-square" CssClass="menu-purple" />
                                        <DxMenuItem Text="Berry" IconCssClass="fa fa-square" CssClass="menu-berry" />
                                    </Items>
                                </DxMenuItem>
                                <DxMenuItem Text="Logout" IconCssClass="fa fa-sign-out" CssClass="menu-logout" Click="Logout" />
                            </Items>
                        </DxMenuItem>
                        
                    </Items>
                </DxMenu>
            </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="login-display">
            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Secondary"
                      Text="Registrarse" @onclick="NavigateToRegister" />
            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" RenderStyle="ButtonRenderStyle.Primary"
                      Text="Conectar" @onclick="NavigateToLogin" />
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject] NavigationManager NavigationManager { get; set; } = null!;

    private FlowUserDto FlowUserDto { get; set; } = new();
    private PersonDto UserPerson { get; set; } = new();

    private string currentTheme = "blazing-dark.bs5.min.css";

    public string Title { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Identity?.Name;

        if (email is null) return;

        var filter = new QueryFilter<FlowUser>()
            {
                FilterProperties = new List<FilterProperty>()
            {
                new()
                {
                    Name = nameof(FlowUser.Email),
                    Value = email,
                    Operator = QueryFilterOperator.Equals
                }
            }
            };
        var result = await UserManager.Get(filter);
        FlowUserDto = result.Items.First();

        if (FlowUserDto is null) return;
        var personfilter = new QueryFilter<Person>
            {
                FilterProperties = new List<FilterProperty>
            {
                new()
                {
                    Name = nameof(Person.ApplicationUserId),
                    Value = FlowUserDto.Id,
                }
            }
            };
        var personResult = await PersonManager.Get(personfilter);
        UserPerson = personResult.Items.First();
        Title = $"Hola {UserPerson.FirstName}!";
        currentTheme = await ThemeService.GetSavedThemeAsync();
        await ThemeService.SetThemeAsync($"_content/DevExpress.Blazor.Themes/{currentTheme}");
    }

    private async Task ChangeTheme(string themeName)
    {
        currentTheme = themeName;
        await ThemeService.SetThemeAsync($"_content/DevExpress.Blazor.Themes/{currentTheme}");
        StateHasChanged();
    }

    private async void OnItemClick(MenuItemClickEventArgs args)
    {
        switch (args.ItemInfo.Text)
        {
            case "Dark":
                await ChangeTheme("blazing-dark.bs5.min.css");
                break;
            case "White":
                await ChangeTheme("office-white.bs5.min.css");
                break;
            case "Purple":
                await ChangeTheme("purple.bs5.min.css");
                break;
            case "Berry":
                await ChangeTheme("blazing-berry.bs5.min.css");
                break;
        }
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("LogOut", true);
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("Register");
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("Login");
    }

}

<style>
    .menu-dark .fa-square {
        color: black;
        background-color: black; /* Opcional, si el fondo es oscuro */
        border: 1px solid #ccc; /* Color para Dark */
    }

    .menu-white .fa-square {
        color: white; /* Color para White */
        background-color: black; /* Opcional, si el fondo es oscuro */
        border: 1px solid #ccc; /* Para mayor visibilidad */
    }

    .menu-purple .fa-square {
        color: mediumpurple;
        background-color: black; /* Opcional, si el fondo es oscuro */
        border: 1px solid #ccc; /* Color para Purple */
    }

    .menu-berry .fa-square {
        color: darkviolet;
        background-color: black; /* Opcional, si el fondo es oscuro */
        border: 1px solid #ccc; /* Color para Berry (rojo oscuro) */
    }

    .menu-logout {
        color: red; /* Cambia el color del texto a rojo */
    }

    .menu-logout .fa-sign-out {
        color: red; /* Cambia el color del ícono a rojo */
    }
</style>